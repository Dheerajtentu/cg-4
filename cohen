#include <GL/glut.h>
#include <stdio.h>
#include <stdbool.h>

#define WIDTH 800
#define HEIGHT 600

// Viewport boundaries (clipping window)
int xmin = 200, ymin = 150, xmax = 600, ymax = 450;

// Polygon vertex data
#define MAX_POINTS 10
int polyPoints[MAX_POINTS][2]; // Stores x, y coordinates of the polygon vertices
int pointCount = 0;            // Number of points added
bool polygonComplete = false; // Flag to check if polygon input is done

// Region codes for Cohen-Sutherland
const int INSIDE = 0;  // 0000
const int LEFT = 1;    // 0001
const int RIGHT = 2;   // 0010
const int BOTTOM = 4;  // 0100
const int TOP = 8;     // 1000

// Compute region code for a given point (x, y)
int computeCode(int x, int y) {
    int code = INSIDE;

    if (x < xmin) code |= LEFT;
    else if (x > xmax) code |= RIGHT;
    if (y < ymin) code |= BOTTOM;
    else if (y > ymax) code |= TOP;

    return code;
}

// Cohen-Sutherland line clipping algorithm
void cohenSutherlandClip(int x1, int y1, int x2, int y2) {
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);
    bool accept = false;

    while (true) {
        if (!(code1 | code2)) {
            // Bitwise OR is 0: both points inside the viewport
            accept = true;
            break;
        } else if (code1 & code2) {
            // Bitwise AND is not 0: both points in same outside region (line is completely outside)
            break;
        } else {
            // Line is partially inside: needs clipping
            int code_out = code1 ? code1 : code2;
            int x, y;

            // Find intersection with clipping boundary
            if (code_out & TOP) {
                x = x1 + (x2 - x1) * (ymax - y1) / (y2 - y1);
                y = ymax;
            } else if (code_out & BOTTOM) {
                x = x1 + (x2 - x1) * (ymin - y1) / (y2 - y1);
                y = ymin;
            } else if (code_out & RIGHT) {
                y = y1 + (y2 - y1) * (xmax - x1) / (x2 - x1);
                x = xmax;
            } else if (code_out & LEFT) {
                y = y1 + (y2 - y1) * (xmin - x1) / (x2 - x1);
                x = xmin;
            }

            // Replace the outside point with the intersection point
            if (code_out == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }

    // If accepted, draw the clipped line
    if (accept) {
        glColor3f(0.0, 1.0, 0.0); // Green for clipped lines
        glBegin(GL_LINES);
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
        glEnd();
    }
}

// Draw the viewport rectangle (clipping window)
void drawViewport() {
    glColor3f(1.0, 1.0, 1.0); // White box
    glBegin(GL_LINE_LOOP);
    glVertex2i(xmin, ymin);
    glVertex2i(xmax, ymin);
    glVertex2i(xmax, ymax);
    glVertex2i(xmin, ymax);
    glEnd();
}

// Draw the user-defined polygon
void drawPolygon() {
    if (pointCount < 2) return;

    glColor3f(1.0, 0.0, 0.0); // Red for original polygon
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < pointCount; i++) {
        glVertex2iv(polyPoints[i]); // Draw each vertex
    }
    glEnd();
}

// Clip each polygon edge using Cohen-Sutherland
void clipPolygon() {
    if (pointCount < 3) return; // Need at least 3 points for a polygon

    for (int i = 0; i < pointCount; i++) {
        int next = (i + 1) % pointCount; // Loop back to start at the end
        cohenSutherlandClip(polyPoints[i][0], polyPoints[i][1],
                            polyPoints[next][0], polyPoints[next][1]);
    }
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    drawViewport();  // Draw clipping window
    drawPolygon();   // Draw original polygon

    if (polygonComplete) {
        clipPolygon(); // Draw clipped version if complete
    }

    glutSwapBuffers(); // Double buffering
}

// Mouse input handler for placing polygon vertices
void mouse(int button, int state, int x, int y) {
    y = HEIGHT - y; // Convert from window to OpenGL coordinates

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (!polygonComplete && pointCount < MAX_POINTS) {
            polyPoints[pointCount][0] = x;
            polyPoints[pointCount][1] = y;
            pointCount++;
            glutPostRedisplay(); // Refresh display
        }
    }
}

// Keyboard input handler
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'c': // Complete polygon and trigger clipping
            polygonComplete = true;
            break;
        case 'r': // Reset everything
            pointCount = 0;
            polygonComplete = false;
            break;
        case 'q': // Quit program
            exit(0);
    }
    glutPostRedisplay();
}

// OpenGL initialization
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Background black
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WIDTH, 0, HEIGHT); // 2D projection
    glMatrixMode(GL_MODELVIEW);
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB); // Double buffer + RGB
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("Cohen-Sutherland Polygon Clipping");

    init();

    // Instructions
    printf("Instructions:\n");
    printf("1. Left-click to add polygon vertices\n");
    printf("2. Press 'c' to complete the polygon and clip it\n");
    printf("3. Press 'r' to reset\n");
    printf("4. Press 'q' to quit\n");

    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();

    return 0;
}
