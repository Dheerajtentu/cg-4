#include <GL/glut.h>
#include <cmath>
void drawKoch(float x1, float y1, float x2, float y2, int depth) {
if (depth == 0) {
glBegin(GL_LINES);
glVertex2f(x1, y1);
glVertex2f(x2, y2);
glEnd();
return;
}
float deltaX = x2 - x1;
float deltaY = y2 - y1;
float xB = x1 + deltaX / 3;
float yB = y1 + deltaY / 3;
float xC = x1 + 2 * deltaX / 3;
float yC = y1 + 2 * deltaY / 3;
float xD = xB + (deltaX * cos(60 * M_PI / 180) - deltaY * sin(60 * M_PI / 180)) / 3;
float yD = yB + (deltaX * sin(60 * M_PI / 180) + deltaY * cos(60 * M_PI / 180)) / 3;
drawKoch(x1, y1, xB, yB, depth - 1);
drawKoch(xB, yB, xD, yD, depth - 1);
drawKoch(xD, yD, xC, yC, depth - 1);
drawKoch(xC, yC, x2, y2, depth - 1);
}
void displayKoch() {
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(1.0, 1.0, 1.0);
drawKoch(100, 100, 400, 100, 4);
glFlush();
}
int main(int argc, char** argv) {
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(500, 500);
glutCreateWindow("Koch Curve Fractal");
glClearColor(0.0, 0.0, 0.0, 0.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0, 500, 0, 500);
glutDisplayFunc(displayKoch);
glutMainLoop();
return 0;
}
