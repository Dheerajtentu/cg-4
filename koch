#include <GL/glut.h>  // OpenGL Utility Toolkit header for windowing and event handling
#include <cmath>      // For mathematical functions like sin, cos, M_PI

// Recursive function to draw Koch Curve between points (x1, y1) and (x2, y2)
void drawKoch(float x1, float y1, float x2, float y2, int depth) {
    // Base case: if recursion depth is 0, draw a straight line
    if (depth == 0) {
        glBegin(GL_LINES);          // Start drawing a line
        glVertex2f(x1, y1);         // First point
        glVertex2f(x2, y2);         // Second point
        glEnd();                    // End drawing
        return;
    }

    // Calculate the change in x and y between the points
    float deltaX = x2 - x1;
    float deltaY = y2 - y1;

    // Calculate points B and C that divide the line segment into 3 equal parts
    float xB = x1 + deltaX / 3;
    float yB = y1 + deltaY / 3;
    float xC = x1 + 2 * deltaX / 3;
    float yC = y1 + 2 * deltaY / 3;

    // Calculate coordinates of point D to form the equilateral triangle
    float xD = xB + (deltaX * cos(60 * M_PI / 180) - deltaY * sin(60 * M_PI / 180)) / 3;
    float yD = yB + (deltaX * sin(60 * M_PI / 180) + deltaY * cos(60 * M_PI / 180)) / 3;

    // Recursively draw the 4 new segments
    drawKoch(x1, y1, xB, yB, depth - 1);  // Segment AB
    drawKoch(xB, yB, xD, yD, depth - 1);  // Segment BD (side of triangle)
    drawKoch(xD, yD, xC, yC, depth - 1);  // Segment DC
    drawKoch(xC, yC, x2, y2, depth - 1);  // Segment CE
}

// Display function called by GLUT to render the scene
void displayKoch() {
    glClear(GL_COLOR_BUFFER_BIT);         // Clear the window
    glColor3f(1.0, 1.0, 1.0);             // Set color to white

    // Draw Koch Curve from point (100, 100) to (400, 100) with depth 4
    drawKoch(100, 100, 400, 100, 4);

    glFlush();                            // Force rendering of all OpenGL commands
}

// Main function to initialize OpenGL and start event loop
int main(int argc, char** argv) {
    glutInit(&argc, argv);                             // Initialize GLUT
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);       // Single buffer and RGB color
    glutInitWindowSize(500, 500);                      // Set initial window size
    glutCreateWindow("Koch Curve Fractal");            // Create window with title

    glClearColor(0.0, 0.0, 0.0, 0.0);                   // Background color: black
    glMatrixMode(GL_PROJECTION);                       // Set up projection matrix
    glLoadIdentity();                                  // Reset projection matrix
    gluOrtho2D(0, 500, 0, 500);                         // Set coordinate system

    glutDisplayFunc(displayKoch);                      // Register display function
    glutMainLoop();                                    // Enter main event loop

    return 0;
}
