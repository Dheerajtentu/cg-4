#include <GL/glut.h>
#include <cmath>
#include <iostream>
using namespace std;

// Window dimensions
const int WIDTH = 800;
const int HEIGHT = 600;

// Triangle vertices (x, y coordinates)
GLfloat vertices[][2] = {
    {100.0, 100.0},
    {200.0, 100.0},
    {150.0, 200.0}
};

// Transformation variables
float scaleX = 1.0, scaleY = 1.0;  // Scaling factors
float angle = 0.0;                 // Rotation angle
float pivotX = 150.0, pivotY = 150.0;  // Pivot point for rotation
bool reflectX = false, reflectY = false;  // Reflection flags

// Function to draw the triangle
void drawObject() {
    glBegin(GL_TRIANGLES);  // Start drawing a triangle
    for (int i = 0; i < 3; i++) {
        glVertex2fv(vertices[i]);  // Draw each vertex
    }
    glEnd();  // End drawing
}

// Display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);  // Clear the screen

    // Draw the original triangle in white
    glColor3f(1.0, 1.0, 1.0);  // RGB: White color
    drawObject();

    // Apply transformations and draw the transformed triangle
    glPushMatrix();  // Save current matrix state

    // Apply scaling
    glScalef(scaleX, scaleY, 1.0);

    // Translate to pivot point for rotation
    glTranslatef(pivotX, pivotY, 0.0);
    glRotatef(angle, 0.0, 0.0, 1.0);  // Rotate about Z-axis (2D rotation)
    glTranslatef(-pivotX, -pivotY, 0.0);  // Translate back

    // Apply reflections if toggled
    if (reflectX) glScalef(-1.0, 1.0, 1.0);  // Reflect across X-axis
    if (reflectY) glScalef(1.0, -1.0, 1.0);  // Reflect across Y-axis

    // Draw the transformed triangle in red
    glColor3f(1.0, 0.0, 0.0);  // RGB: Red color
    drawObject();

    glPopMatrix();  // Restore original matrix state
    glutSwapBuffers();  // Swap buffers for double buffering
}

// Keyboard interaction function
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 's':  // Scale up
        scaleX += 0.1;
        scaleY += 0.1;
        break;
    case 'S':  // Scale down
        scaleX -= 0.1;
        scaleY -= 0.1;
        break;
    case 'r':  // Rotate clockwise
        angle += 5.0;
        break;
    case 'R':  // Rotate counter-clockwise
        angle -= 5.0;
        break;
    case 'x':  // Toggle X-axis reflection
        reflectX = !reflectX;
        break;
    case 'y':  // Toggle Y-axis reflection
        reflectY = !reflectY;
        break;
    case 'p':  // Set pivot point based on mouse location
        pivotX = x;
        pivotY = HEIGHT - y;  // Flip y-axis to match OpenGL coordinates
        cout << "New pivot point: (" << pivotX << ", " << pivotY << ")" << endl;
        break;
    case ' ':  // Reset all transformations
        scaleX = scaleY = 1.0;
        angle = 0.0;
        reflectX = reflectY = false;
        break;
    case 27:  // ESC key to exit
        exit(0);
    }

    // Redraw with updated transformations
    glutPostRedisplay();
}

// OpenGL initialization
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0);  // Black background
    glMatrixMode(GL_PROJECTION);  // Set projection matrix
    glLoadIdentity();  // Reset to identity matrix
    gluOrtho2D(0, WIDTH, 0, HEIGHT);  // Set 2D orthographic projection
    glMatrixMode(GL_MODELVIEW);  // Switch back to modelview matrix
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);  // Initialize GLUT
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);  // Double buffering and RGB color
    glutInitWindowSize(WIDTH, HEIGHT);  // Set window size
    glutCreateWindow("2D Transformations");  // Create window with title
    init();  // Call initialization function

    // Register callback functions
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

    // Print instructions
    cout << "2D Transformations Demo" << endl;
    cout << "Controls:" << endl;
    cout << "s/S - Scale up/down" << endl;
    cout << "r/R - Rotate clockwise/counter-clockwise" << endl;
    cout << "x - Toggle X-axis reflection" << endl;
    cout << "y - Toggle Y-axis reflection" << endl;
    cout << "p - Set pivot point (based on cursor location)" << endl;
    cout << "SPACE - Reset all transformations" << endl;
    cout << "ESC - Exit" << endl;

    glutMainLoop();  // Start the event loop
    return 0;
}
