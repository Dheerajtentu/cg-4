#include <gl/glut.h>      // GLUT header for OpenGL windowing
#include <iostream>       // For standard I/O
#include <math.h>         // For math operations (not extensively used here)
using namespace std;

// Initialization function for OpenGL settings
void myInit(void) {
    glClearColor(0.0, 0.0, 0.0, 0.0);   // Set background to black
    glClear(GL_COLOR_BUFFER_BIT);       // Clear the screen
    glPointSize(1.0);                   // Set point size for drawing
    glLineWidth(2.0);                   // Set line thickness
    glMatrixMode(GL_PROJECTION);       // Setup projection matrix
    glLoadIdentity();                  // Load identity matrix
    gluOrtho2D(0.0, 500, 0.0, 500);    // Define 2D coordinate system
}

// Empty display function (not needed here since everything is event-driven)
void display(void) {}

// Structure to hold RGB color values
struct COLOR {
    float r, b, g;
};

// Class to handle polygon filling operations (flood fill and boundary fill)
class polygon_fill {
    // Compare two colors; return 1 if equal
    int compare_color(COLOR a, COLOR b) {
        return (a.r == b.r && a.b == b.b && a.g == b.g);
    }

    // Draw a point at (x, y) with color c
    void draw(int x, int y, COLOR c) {
        glColor3f(c.r, c.b, c.g);
        glBegin(GL_POINTS);
        glVertex2f(x, y);
        glEnd();
        glFlush();
    }

    // Get the color of the pixel at (x, y)
    COLOR getpixelcolor(int x, int y) {
        COLOR c;
        glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, &c); // Read color from framebuffer
        return c;
    }

public:
    // Recursive boundary fill algorithm (8-connected)
    void bound_fill(int x, int y, COLOR fill, COLOR border_col) {
        COLOR color = getpixelcolor(x, y);
        if (!compare_color(color, border_col) && !compare_color(color, fill)) {
            draw(x, y, fill);
            bound_fill(x + 1, y, fill, border_col);
            bound_fill(x, y + 1, fill, border_col);
            bound_fill(x - 1, y, fill, border_col);
            bound_fill(x, y - 1, fill, border_col);
            bound_fill(x - 1, y - 1, fill, border_col);
            bound_fill(x - 1, y + 1, fill, border_col);
            bound_fill(x + 1, y - 1, fill, border_col);
            bound_fill(x + 1, y + 1, fill, border_col);
        }
    }

    // Recursive flood fill algorithm (4-connected)
    void flood_fill(int x, int y, COLOR fill, COLOR bg_color) {
        COLOR color = getpixelcolor(x, y);
        if (compare_color(color, bg_color)) {
            draw(x, y, fill);
            flood_fill(x + 1, y, fill, bg_color);
            flood_fill(x, y + 1, fill, bg_color);
            flood_fill(x - 1, y, fill, bg_color);
            flood_fill(x, y - 1, fill, bg_color);
        }
    }
};

// Globals for storing polygon points and click location
int xc, yc, i = 0;
int xarr[100];
int yarr[100];

// Menu handler function
void menu(int value) {
    polygon_fill p;
    COLOR fill, bcol, back_col;

    // Set fill color (green)
    fill.r = 0.0; fill.b = 0.0; fill.g = 1.0;
    // Set boundary color (red)
    bcol.r = 1.0; bcol.b = 0.0; bcol.g = 0.0;
    // Set background color (black)
    back_col.r = 0.0; back_col.b = 0.0; back_col.g = 0.0;

    switch (value) {
        case 1:  // Flood Fill
            p.flood_fill(xc, 500 - yc, fill, back_col);
            cout << "COMPLETED FLOOD FILL" << "\n";
            break;

        case 2:  // Boundary Fill
            p.bound_fill(xc, 500 - yc, fill, bcol);
            cout << "COMPLETED BOUNDARY FILL" << "\n";
            break;

        case 3:  // Clear Screen
            glClear(GL_COLOR_BUFFER_BIT);
            glColor3f(0.0, 0.0, 0.0);
            glBegin(GL_POINTS);
            glVertex2i(0, 0);
            glEnd();
            glFlush();
            i = 0;
            cout << "SCREEN CLEARED" << "\n";
            break;
    }
}

// Keyboard input handler
void keyboard(unsigned char key, int x, int y) {
    if (key == 27) // ESC key
        exit(0);
    else
        cout << "you pressed\n";
}

// Mouse click event handler
void mouse(int button, int state, int x, int y) {
    if (state == GLUT_DOWN) {
        if (button == GLUT_LEFT_BUTTON) {
            // Save point for polygon drawing
            xarr[i] = x;
            yarr[i] = y;
            i++;

            // Draw line from previous point to current
            if (i > 1) {
                glColor3f(1.0, 0.0, 0.0); // Red boundary
                glBegin(GL_LINE_STRIP);
                glVertex2i(xarr[i - 2], 500 - yarr[i - 2]);
                glVertex2i(xarr[i - 1], 500 - yarr[i - 1]);
                glEnd();
                glFlush();
            }
        }
        if (button == GLUT_RIGHT_BUTTON) {
            // Store seed point for filling
            xc = x;
            yc = y;
        }
    }
    return;
}

// Main function
int main(int argc, char **argv) {
    glutInit(&argc, argv);                       // Initialize GLUT
    glutInitWindowSize(500, 500);                // Set window size
    glutInitWindowPosition(200, 100);            // Set window position
    glutCreateWindow("POLYGON FILL");            // Create window with title

    glutDisplayFunc(display);                    // Set display callback
    glutMouseFunc(mouse);                        // Set mouse click callback
    glutKeyboardFunc(keyboard);                  // Set keyboard input callback

    // Create and register menu with middle mouse button
    glutCreateMenu(menu);
    glutAddMenuEntry("FLOOD FILL", 1);
    glutAddMenuEntry("BOUNDARY FILL", 2);
    glutAddMenuEntry("CLEAR SCREEN", 3);
    glutAttachMenu(GLUT_MIDDLE_BUTTON);

    // Instructions
    cout << "PLEASE FOLLOW THESE STEPS:" << endl;
    cout << "1. MAKE POLYGON by USING LEFT CLICK" << endl;
    cout << "2. SELECT SEED PIXEL BY RIGHT CLICK" << endl;
    cout << "FOR MENU, use the middle button of the mouse" << endl;

    myInit();                      // Call initialization function
    glutMainLoop();                // Start main event loop

    return 0;
}
