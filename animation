#include <GL/glut.h>
#include <cmath>

float angle = 0.0f;
float speed = 2.0f;   // Rotation speed
int direction = 1;    // 1 for anti-clockwise, -1 for clockwise, 0 for stop

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    // Rotate the square
    glRotatef(angle, 0.0f, 0.0f, 1.0f);

    // Draw the square
    glBegin(GL_QUADS);
    glVertex2f(-0.5f, -0.5f);
    glVertex2f(0.5f, -0.5f);
    glVertex2f(0.5f, 0.5f);
    glVertex2f(-0.5f, 0.5f);
    glEnd();

    glutSwapBuffers();
}

void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
}

void update(int value) {
    angle += direction * speed;
    if (angle > 360.0f) angle -= 360.0f;
    if (angle < 0.0f) angle += 360.0f;

    glutPostRedisplay();
    glutTimerFunc(16, update, 0); // 60 FPS
}

// Handle keyboard input for rotation control
void handleKeypress(unsigned char key, int x, int y) {
    switch (key) {
        case 'a': // Anti-clockwise
            direction = 1;
            break;
        case 'd': // Clockwise
            direction = -1;
            break;
        case 's': // Stop
            direction = 0;
            break;
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Rotating Square");

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(handleKeypress); // Add keyboard input
    glutTimerFunc(0, update, 0);

    glutMainLoop();
    return 0;
}
